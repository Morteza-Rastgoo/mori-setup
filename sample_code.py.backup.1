import unittest
from math import sqrt

class Calculator:
    def __init__(self):
        pass

    def add(self, a, b):
        return a + b

    def subtract(self, a, b):
        return a - b

    def multiply(self, a, b):
        return a * b

    def divide(self, a, b):
        if b == 0:
            raise ValueError("Division by zero is not allowed.")
        return a / b

    def complex_addition(self, a, b):
        real_a = a[0]
        imag_a = a[1]
        real_b = b[0]
        imag_b = b[1]
        return (real_a + real_b, imag_a + imag_b)

    def square_root(self, number):
        if number < 0:
            raise ValueError("Negative numbers do not have real square roots.")
        return sqrt(number)

    def power(self, base, exponent):
        result = base
        for _ in range(1, exponent):
            result *= base
        return result

    def store_and_recall(self, key, value):
        self.memory[key] = value

    def recall(self, key):
        if key not in self.memory:
            raise KeyError("The specified memory key does not exist.")
        return self.memory[key]

    def clear_memory(self):
        self.memory.clear()

    def __str__(self):
        return "Calculator"

    @property
    def memory(self):
        return self.__dict__.get("memory", {})

if __name__ == "__main__":
    calc = Calculator()

    print("\nBasic operations:")
    print(f"2 + 3 = {calc.add(2, 3)}")
    print(f"5 - 2 = {calc.subtract(5, 2)}")
    print(f"4 * 3 = {calc.multiply(4, 3)}")
    print(f"10 / 2 = {calc.divide(10, 2)}")

    print("\nComplex number operations:")
    complex_num1 = (1, 2)
    complex_num2 = (3, 4)
    print(f"({complex_num1[0]}+{complex_num1[1]}j) + ({complex_num2[0]}+{complex_num2[1]}j) = {calc.complex_addition(complex_num1, complex_num2)}")
    print(f"sqrt(-1) = {calc.square_root(-1)}")

    print("\nMemory functions:")
    calc.store_and_recall("result", 42)
    print(f"Stored value: {calc.recall('result')}")
    calc.clear_memory()

class TestCalculator(unittest.TestCase):
    def setUp(self):
        self.calculator = Calculator()

    def test_addition(self):
        result = self.calculator.add(2, 3)
        self.assertEqual(result, 5)

    def test_subtraction(self):
        result = self.calculator.subtract(5, 2)
        self.assertEqual(result, 3)

    def test_multiplication(self):
        result = self.calculator.multiply(4, 3)
        self.assertEqual(result, 12)

    def test_division(self):
        with self.assertRaises(ValueError):
            self.calculator.divide(0, 2)
        result = self.calculator.divide(10, 2)
        self.assertEqual(result, 5)

    def test_complex_addition(self):
        complex_num1 = (1, 2)
        complex_num2 = (3, 4)
        result = self.calculator.complex_addition(complex_num1, complex_num2)
        expected = (4, 6)
        self.assertEqual(result, expected)

    def test_square_root(self):
        result = self.calculator.square_root(9)
        self.assertEqual(result, 3)
        with self.assertRaises(ValueError):
            self.calculator.square_root(-1)

    def test_power(self):
        result = self.calculator.power(2, 4)
        self.assertEqual(result, 16)

    def test_store_and_recall(self):
        self.calculator.store_and_recall("test", 42)
        result = self.calculator.recall("test")
        self.assertEqual(result, 42)

if __name__ == "__main__":
    unittest.main()