class Calculator:
        def __init__(self):
            pass

        def add(self, *numbers):
            return sum(numbers)

        def subtract(self, num1, num2=0):
            try:
                result = num1 - num2
                print(f"{num1} - {num2} = {result}")
            except ValueError as e:
                print("Error:", e)

        def multiply(self, *numbers):
            return math.prod(numbers)

        def divide(self, dividend, divisor):
            if divisor == 0:
                raise ValueError("Cannot divide by zero.")
            return dividend / divisor

        def square_root(self, number):
            if number < 0:
                raise ValueError("Square root of negative numbers is undefined.")
            return math.sqrt(number)

        def power(self, base, exponent):
            if base == 0 and exponent <= 0:
                raise ValueError("Base cannot be zero for exponentiation.")
            return base ** exponent

        def store_and_recall(self, key, value):
            self._memory[key] = value

        def recall(self, key):
            if key not in self._memory:
                raise KeyError("No such memory key.")
            return self._memory[key]

    if __name__ == "__main__":
        calc = Calculator()

        # Test basic operations
        print("Basic operations:")
        result = calc.add(2, 3)
        print(f"2 + 3 = {result}")
        result = calc.subtract(5, 2)
        print(f"5 - 2 = {result}")
        result = calc.multiply(4, 3)
        print(f"4 * 3 = {result}")
        result = calc.divide(10, 2)
        print(f"10 / 2 = {result}")

        # Test advanced operations
        print("\nAdvanced operations:")
        result = calc.square_root(16)
        print(f"Square root of 16 = {result}")
        result = calc.power(2, 3)
        print(f"2 to the power of 3 = {result}")

        # Test memory functions
        print("\nMemory functions:")
        calc._memory = {"key": 42}
        stored_value = calc.recall("key")
        print(f"Stored value: {stored_value}")